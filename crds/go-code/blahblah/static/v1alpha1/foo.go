/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	time "time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// BlahInformer provides access to a shared informer and lister for
// Blahs.
type BlahInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() BlahLister
}

type blahInformer struct {
	factory          SharedInformerFactory
	tweakListOptions TweakListOptionsFunc
	namespace        string
}

// NewBlahInformer constructs a new informer for Blah type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory Blahtprint and number of connections to the server.
func NewBlahInformer(client Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredBlahInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredBlahInformer constructs a new informer for Blah type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory Blahtprint and number of connections to the server.
func NewFilteredBlahInformer(client Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SamplecontrollerV1alpha1().Blahs(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SamplecontrollerV1alpha1().Blahs(namespace).Watch(options)
			},
		},
		&Blah{},
		resyncPeriod,
		indexers,
	)
}

func (f *blahInformer) defaultInformer(client Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredBlahInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *blahInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&Blah{}, f.defaultInformer)
}

func (f *blahInformer) Lister() BlahLister {
	return NewBlahLister(f.Informer().GetIndexer())
}
